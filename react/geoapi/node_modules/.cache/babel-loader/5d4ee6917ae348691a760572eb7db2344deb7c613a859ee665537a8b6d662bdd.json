{"ast":null,"code":"var _jsxFileName = \"/home/fsmith/geoRiddle/react/geoapi/src/components/Guess.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  suggestion: {\n    cursor: 'pointer',\n    borderLeft: '1px solid black',\n    borderRight: '1px solid black',\n    borderBottom: '1px solid black',\n    background: 'white',\n    '&:hover': {\n      background: \"gray\"\n    }\n  },\n  correct: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'baseline',\n    fontSize: '24px',\n    textAlign: 'center',\n    marginBottom: theme.spacing(2),\n    color: 'green'\n  },\n  incorrect: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'baseline',\n    fontSize: '24px',\n    textAlign: 'center',\n    marginBottom: theme.spacing(2),\n    color: 'red'\n  }\n}));\nconst Guess = props => {\n  _s();\n  const [results, setResults] = useState([]);\n  const [text, setText] = useState([]);\n  const [suggestions, setSuggestions] = useState([]);\n  const [history, setHistory] = useState([]);\n  const [boolError, setBoolError] = useState(false);\n  const [helpertext, setHelpertext] = useState([]);\n  const {\n    answers\n  } = props;\n  const {\n    countries\n  } = props;\n  const classes = useStyles();\n  const onSuggestHandler = text => {\n    setText(text);\n    setSuggestions([]);\n  };\n  const onChangeHandler = text => {\n    let matches = [];\n    if (text.length > 0) {\n      matches = countries.filter(country => {\n        const regex = new RegExp(`${text}`, \"gi\");\n        return country.name.match(regex);\n      });\n    }\n    setSuggestions(matches.slice(0, 5));\n    setText(text);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (history.includes(text)) {\n      setBoolError(true);\n      setHelpertext('Already Guessed');\n      return;\n    }\n    history.push(text);\n    let countryValidation = Object.values(countries).includes(text); // true\n\n    // countryValidation = countries.filter(country => {\n    //     const regex = new RegExp(`${text}`, \"/^a$/\");\n    //     return (country.name.match(regex))\n    // })\n\n    console.log(countries.name);\n    if (countryValidation) {\n      setBoolError(true);\n      setHelpertext('Enter a valid country');\n      setText('');\n      return;\n    }\n    for (var i = 0; i < answers.answers.length; i++) {\n      if (answers.answers[i].name == text) {\n        results.push(true);\n        setText('');\n        return;\n      }\n    }\n\n    // console.log('answers', answers)\n    // console.log('guess: ', text)\n    // console.log('history: ', history)\n    results.push(false);\n    // console.log('results', results)\n\n    setText('');\n  };\n  if (!answers || answers.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Can not find any answers, sorry\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 47\n  }, this);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      component: \"main\",\n      children: [results.map((visible, index) => {\n        return visible ? /*#__PURE__*/_jsxDEV(\"li\", {\n          className: classes.correct,\n          children: history[index]\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"li\", {\n          className: classes.incorrect,\n          children: history[index]\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(Card, {\n        className: \"guessCard\",\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          className: \"guess\",\n          children: [suggestions && suggestions.map((suggestion, i) => /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            color: \"inherit\",\n            noWrap: true,\n            className: classes.suggestion,\n            onClick: () => onSuggestHandler(suggestion.name),\n            children: suggestion.name\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)), /*#__PURE__*/_jsxDEV(\"form\", {\n            className: classes.guessForm,\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              id: \"outlined-guess\",\n              label: \"Guess a Country\",\n              onChange: e => onChangeHandler(e.target.value),\n              value: text,\n              error: boolError,\n              helperText: helpertext,\n              onBlur: () => {\n                setTimeout(() => {\n                  setSuggestions([]);\n                }, 100);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              variant: \"contained\",\n              disableElevation: true,\n              children: \"Guess\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 3\n  }, this);\n};\n_s(Guess, \"3VNH05cSmLeKO+qtP8y6HzkYwiE=\", false, function () {\n  return [useStyles];\n});\n_c = Guess;\nexport default Guess;\nvar _c;\n$RefreshReg$(_c, \"Guess\");","map":{"version":3,"names":["React","useEffect","useState","makeStyles","TextField","Container","Typography","Button","Card","CardContent","Grid","useStyles","theme","suggestion","cursor","borderLeft","borderRight","borderBottom","background","correct","display","justifyContent","alignItems","fontSize","textAlign","marginBottom","spacing","color","incorrect","Guess","props","results","setResults","text","setText","suggestions","setSuggestions","history","setHistory","boolError","setBoolError","helpertext","setHelpertext","answers","countries","classes","onSuggestHandler","onChangeHandler","matches","length","filter","country","regex","RegExp","name","match","slice","handleSubmit","e","preventDefault","includes","push","countryValidation","Object","values","console","log","i","map","visible","index","guessForm","target","value","setTimeout"],"sources":["/home/fsmith/geoRiddle/react/geoapi/src/components/Guess.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField'\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles((theme) => ({\n\tsuggestion: {\n        \n\t\tcursor: 'pointer',\n        borderLeft: '1px solid black',\n        borderRight: '1px solid black',\n        borderBottom: '1px solid black',\n        background: 'white',\n        '&:hover': {\n            background: \"gray\",\n        }\n\t},\n\n    correct: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'baseline',\n        fontSize: '24px',\n        textAlign: 'center',\n        marginBottom: theme.spacing(2),\n        color: 'green'\n    },\n\n    incorrect: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'baseline',\n        fontSize: '24px',\n        textAlign: 'center',\n        marginBottom: theme.spacing(2),\n        color: 'red'\n    }, \n\n\n}));\n\nconst Guess = (props) => {\n    const [results, setResults] = useState([])\n\tconst [text, setText] = useState([])\n    const [suggestions, setSuggestions] = useState([])\n    const [history, setHistory] = useState([])\n    const [boolError, setBoolError] = useState(false)\n    const [helpertext, setHelpertext] = useState([])\n\tconst { answers } = props;\n    const { countries } = props;\n    const classes = useStyles();\n    const onSuggestHandler = (text)=>{\n        setText(text);\n        setSuggestions([]);\n    }\n\tconst onChangeHandler = (text) => {\n\n        let matches = []\n        if (text.length > 0) {\n            matches = countries.filter(country => {\n            const regex = new RegExp(`${text}`, \"gi\");\n            return country.name.match(regex)\n        })\n        }\n\n\t\tsetSuggestions(matches.slice(0,5))\n        setText(text)\n        \n\t}\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (history.includes(text)){\n            setBoolError(true)\n            setHelpertext('Already Guessed')\n            return\n        }\n        history.push(text)\n\n        let countryValidation = Object.values(countries).includes(text); // true\n\n\n        // countryValidation = countries.filter(country => {\n        //     const regex = new RegExp(`${text}`, \"/^a$/\");\n        //     return (country.name.match(regex))\n        // })\n\n        console.log(countries.name)\n\n        if (countryValidation){\n            setBoolError(true)\n            setHelpertext('Enter a valid country')\n            setText('')\n            return\n        }\n\n\n\n        for (var i = 0; i < answers.answers.length; i++){\n            if (answers.answers[i].name == text){\n                results.push(true)\n                setText('')\n                return\n            }\n        }\n        \n        // console.log('answers', answers)\n        // console.log('guess: ', text)\n        // console.log('history: ', history)\n        results.push(false)\n        // console.log('results', results)\n\n        setText('')\n\n    }\n\n\tif (!answers || answers.length === 0) return <p>Can not find any answers, sorry</p>;\n\treturn (\n\t\t<React.Fragment>\n\n\t\t\t<Container maxWidth=\"md\" component=\"main\" >\n                {results.map((visible, index) => {    \n                    return visible ? ( \n                        <li  className={classes.correct} key = {index}>{history[index]}</li> \n                        ) :(\n                        <li  className={classes.incorrect} key = {index}>{history[index]}</li>\n                    )\n                })}\n                <Card className=\"guessCard\">\n                    <CardContent className=\"guess\">\n\n                    {suggestions && suggestions.map((suggestion,i) =>\n                        <Typography  \n                            key={i} \n                            variant=\"h6\" \n                            color=\"inherit\" \n                            noWrap\n                            className = {classes.suggestion}\n                            onClick={()=>onSuggestHandler(suggestion.name)}>\n                            {suggestion.name}\n                        </Typography>\n                            )}\n                        <form className={classes.guessForm} onSubmit={handleSubmit} >\n                            <TextField\n                            id=\"outlined-guess\"\n                            label=\"Guess a Country\"\n                            onChange={e=> onChangeHandler(e.target.value)}\n                            value={text}\n                            error={boolError}\n                            helperText={helpertext}\n                            onBlur={()=> {\n                                setTimeout(()=>{\n                                    setSuggestions([])\n                                }, 100)\n                            }}\n                            />\n                            <Button \n                            type=\"submit\"\n                            variant=\"contained\"\n                            disableElevation>\n                                Guess\n                            </Button>\n                        </form>\n                    </CardContent>\n                </Card>\n\n\n\n            </Container>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default Guess;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}