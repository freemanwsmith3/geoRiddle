{"ast":null,"code":"var _jsxFileName = \"/home/fsmith/geoRiddle/react/geoapi/src/components/Guess.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  suggestion: {\n    paddingTop: '56.25%' // 16:9\n  }\n}));\n\nconst Guess = props => {\n  _s();\n  const [text, setText] = useState([]);\n  const [suggestions, setSuggestions] = useState([]);\n  const {\n    countries\n  } = props;\n  const classes = useStyles();\n  const onChangeHandler = text => {\n    let matches = [];\n    if (text.length > 0) {\n      matches = countries.filter(country => {\n        const regex = new RegExp(`${text}`, \"gi\");\n        return country.name.match(regex);\n      });\n    }\n    console.log('matches', matches);\n    setSuggestions(matches);\n    setText(text);\n  };\n  if (!countries || countries.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Can not find any countries, sorry\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 51\n  }, this);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      component: \"main\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: \"guess card\",\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          className: \"guess\",\n          children: [suggestions && suggestions.map((suggestion, i) => /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            color: \"inherit\",\n            noWrap: true,\n            children: suggestion.name\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this)), /*#__PURE__*/_jsxDEV(TextField, {\n            id: \"outlined-guess\",\n            label: \"Guess\",\n            onChange: e => onChangeHandler(e.target.value),\n            value: text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 3\n  }, this);\n};\n_s(Guess, \"eGMPn/NC9RaC+cxCZhRRM9je7Vc=\", false, function () {\n  return [useStyles];\n});\n_c = Guess;\nexport default Guess;\nvar _c;\n$RefreshReg$(_c, \"Guess\");","map":{"version":3,"names":["React","useEffect","useState","makeStyles","TextField","Container","Typography","Card","CardContent","useStyles","theme","suggestion","paddingTop","Guess","props","text","setText","suggestions","setSuggestions","countries","classes","onChangeHandler","matches","length","filter","country","regex","RegExp","name","match","console","log","map","i","e","target","value"],"sources":["/home/fsmith/geoRiddle/react/geoapi/src/components/Guess.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField'\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst useStyles = makeStyles((theme) => ({\n\tsuggestion: {\n\t\tpaddingTop: '56.25%', // 16:9\n\t}\n}));\n\nconst Guess = (props) => {\n\tconst [text, setText] = useState([]);\n    const [suggestions, setSuggestions] = useState([])\n\tconst { countries } = props;\n    const classes = useStyles();\n\tconst onChangeHandler = (text) => {\n        let matches = []\n        if (text.length > 0) {\n            matches = countries.filter(country => {\n            const regex = new RegExp(`${text}`, \"gi\");\n            return country.name.match(regex)\n        })\n        }\n        console.log('matches', matches)\n\t\tsetSuggestions(matches)\n        setText(text)\n        \n\t}\n\n\n\tif (!countries || countries.length === 0) return <p>Can not find any countries, sorry</p>;\n\treturn (\n\t\t<React.Fragment>\n\n\t\t\t<Container maxWidth=\"md\" component=\"main\">\n                <Card className=\"guess card\">\n                    <CardContent className=\"guess\">\n\n                    {suggestions && suggestions.map((suggestion,i) =>\n                        <Typography  key={i} variant=\"h6\" color=\"inherit\" noWrap>\n                            {suggestion.name}\n                        </Typography>\n                            )}\n                        <TextField\n                            id=\"outlined-guess\"\n                            label=\"Guess\"\n                            onChange={e=> onChangeHandler(e.target.value)}\n                            value={text}\n                        />\n\n                    </CardContent>\n                </Card>\n\n\n\n            </Container>\n\t\t</React.Fragment>\n\t);\n};\nexport default Guess;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,UAAU,QAAQ,0BAA0B;AACrD,OAAOC,SAAS,MAAM,6BAA6B;AACnD,OAAOC,SAAS,MAAM,6BAA6B;AACnD,OAAOC,UAAU,MAAM,8BAA8B;AACrD,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,WAAW,MAAM,+BAA+B;AAAC;AAExD,MAAMC,SAAS,GAAGN,UAAU,CAAEO,KAAK,KAAM;EACxCC,UAAU,EAAE;IACXC,UAAU,EAAE,QAAQ,CAAE;EACvB;AACD,CAAC,CAAC,CAAC;;AAEH,MAAMC,KAAK,GAAIC,KAAK,IAAK;EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACjC,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACrD,MAAM;IAAEiB;EAAU,CAAC,GAAGL,KAAK;EACxB,MAAMM,OAAO,GAAGX,SAAS,EAAE;EAC9B,MAAMY,eAAe,GAAIN,IAAI,IAAK;IAC3B,IAAIO,OAAO,GAAG,EAAE;IAChB,IAAIP,IAAI,CAACQ,MAAM,GAAG,CAAC,EAAE;MACjBD,OAAO,GAAGH,SAAS,CAACK,MAAM,CAACC,OAAO,IAAI;QACtC,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAAE,GAAEZ,IAAK,EAAC,EAAE,IAAI,CAAC;QACzC,OAAOU,OAAO,CAACG,IAAI,CAACC,KAAK,CAACH,KAAK,CAAC;MACpC,CAAC,CAAC;IACF;IACAI,OAAO,CAACC,GAAG,CAAC,SAAS,EAAET,OAAO,CAAC;IACrCJ,cAAc,CAACI,OAAO,CAAC;IACjBN,OAAO,CAACD,IAAI,CAAC;EAEpB,CAAC;EAGD,IAAI,CAACI,SAAS,IAAIA,SAAS,CAACI,MAAM,KAAK,CAAC,EAAE,oBAAO;IAAA,UAAG;EAAiC;IAAA;IAAA;IAAA;EAAA,QAAI;EACzF,oBACC,QAAC,KAAK,CAAC,QAAQ;IAAA,uBAEd,QAAC,SAAS;MAAC,QAAQ,EAAC,IAAI;MAAC,SAAS,EAAC,MAAM;MAAA,uBAC5B,QAAC,IAAI;QAAC,SAAS,EAAC,YAAY;QAAA,uBACxB,QAAC,WAAW;UAAC,SAAS,EAAC,OAAO;UAAA,WAE7BN,WAAW,IAAIA,WAAW,CAACe,GAAG,CAAC,CAACrB,UAAU,EAACsB,CAAC,kBACzC,QAAC,UAAU;YAAU,OAAO,EAAC,IAAI;YAAC,KAAK,EAAC,SAAS;YAAC,MAAM;YAAA,UACnDtB,UAAU,CAACiB;UAAI,GADFK,CAAC;YAAA;YAAA;YAAA;UAAA,QAEN,CACR,eACL,QAAC,SAAS;YACN,EAAE,EAAC,gBAAgB;YACnB,KAAK,EAAC,OAAO;YACb,QAAQ,EAAEC,CAAC,IAAGb,eAAe,CAACa,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;YAC9C,KAAK,EAAErB;UAAK;YAAA;YAAA;YAAA;UAAA,QACd;QAAA;UAAA;UAAA;UAAA;QAAA;MAEQ;QAAA;QAAA;QAAA;MAAA;IACX;MAAA;MAAA;MAAA;IAAA;EAIC;IAAA;IAAA;IAAA;EAAA,QACL;AAEnB,CAAC;AAAC,GAhDIF,KAAK;EAAA,QAISJ,SAAS;AAAA;AAAA,KAJvBI,KAAK;AAiDX,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}