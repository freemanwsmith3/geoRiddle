{"ast":null,"code":"var _jsxFileName = \"/home/fsmith/geoRiddle/react/geoapi/src/components/Guess.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport Results from './Results';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  suggestion: {\n    cursor: 'pointer',\n    borderLeft: '1px solid black',\n    borderRight: '1px solid black',\n    borderBottom: '1px solid black',\n    borderTop: '1px solid black',\n    background: 'white',\n    '&:hover': {\n      background: \"gray\"\n    }\n  }\n}));\nconst Guess = props => {\n  _s();\n  const {\n    suggestions\n  } = props;\n  const classes = useStyles();\n  const onSuggestHandler = text => {\n    // console.log(text)\n    setText(text);\n    setSuggestions([]);\n  };\n  const onChangeHandler = text => {\n    // console.log('text')\n    // console.log('history: ', history)\n    let matches = [];\n    if (text.length > 0) {\n      matches = countries.filter(country => {\n        const regex = new RegExp(`${text}`, \"gi\");\n        return country.name.match(regex);\n      });\n    }\n    setSuggestions(matches.slice(0, 5));\n    setText(text);\n  };\n  const handleSubmit = e => {\n    console.log(text);\n    e.preventDefault();\n    if (history.includes(text)) {\n      setBoolError(true);\n      setHelpertext('Already Guessed');\n      return;\n    }\n    let countryValidation;\n    countryValidation = countries.filter(country => {\n      const regex = new RegExp(`^${text}$`, \"i\");\n      return country.name.match(regex);\n    });\n    if (countryValidation == 0) {\n      setBoolError(true);\n      setHelpertext('Enter a valid country');\n      setText('');\n      return;\n    }\n    history.push(text);\n    for (var i = 0; i < answers.answers.length; i++) {\n      if (answers.answers[i].name == text) {\n        results.push(true);\n        setText('');\n        return;\n      }\n    }\n\n    // console.log('answers', answers)\n    // console.log('guess: ', text)\n\n    results.push(false);\n    // console.log('results', results)\n\n    setText('');\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      component: \"main\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [suggestions && suggestions.map((suggestion, i) => /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            color: \"inherit\",\n            noWrap: true,\n            className: classes.suggestion,\n            onClick: () => onSuggestHandler(suggestion.name),\n            children: suggestion.name\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this)), /*#__PURE__*/_jsxDEV(\"form\", {\n            className: classes.guessForm,\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              id: \"outlined-guess\",\n              label: \"Guess a Country\",\n              onChange: e => onChangeHandler(e.target.value),\n              value: text,\n              error: boolError,\n              helperText: helpertext\n              // onBlur={()=> {\n              //     setTimeout(()=>{\n              //         setSuggestions([])\n              //     }, 100)\n              // }}\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              className: \"guessButton\",\n              type: \"submit\",\n              variant: \"contained\",\n              disableElevation: true,\n              children: \"Guess\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 3\n  }, this);\n};\n_s(Guess, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n_c = Guess;\nexport default Guess;\nvar _c;\n$RefreshReg$(_c, \"Guess\");","map":{"version":3,"names":["React","useEffect","useState","makeStyles","TextField","Container","Typography","Button","Card","CardContent","Grid","Results","useStyles","theme","suggestion","cursor","borderLeft","borderRight","borderBottom","borderTop","background","Guess","props","suggestions","classes","onSuggestHandler","text","setText","setSuggestions","onChangeHandler","matches","length","countries","filter","country","regex","RegExp","name","match","slice","handleSubmit","e","console","log","preventDefault","history","includes","setBoolError","setHelpertext","countryValidation","push","i","answers","results","map","guessForm","target","value","boolError","helpertext"],"sources":["/home/fsmith/geoRiddle/react/geoapi/src/components/Guess.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField'\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport Results from './Results';\n\nconst useStyles = makeStyles((theme) => ({\n\tsuggestion: {\n        \n\t\tcursor: 'pointer',\n        borderLeft: '1px solid black',\n        borderRight: '1px solid black',\n        borderBottom: '1px solid black',\n        borderTop: '1px solid black',\n        background: 'white',\n        '&:hover': {\n            background: \"gray\",\n        }\n\t},\n\n\n\n}));\n\nconst Guess = (props) => {\n\n\tconst { suggestions } = props;\n    const classes = useStyles();\n    const onSuggestHandler = (text)=>{\n        // console.log(text)\n        setText(text);\n        setSuggestions([]);\n    }\n\tconst onChangeHandler = (text) => {\n        // console.log('text')\n        // console.log('history: ', history)\n        let matches = []\n        if (text.length > 0) {\n            matches = countries.filter(country => {\n            const regex = new RegExp(`${text}`, \"gi\");\n            return country.name.match(regex)\n        })\n        }\n\n\t\tsetSuggestions(matches.slice(0,5))\n        setText(text)\n        \n\t}\n\n    const handleSubmit = (e) => {\n        console.log(text)\n        e.preventDefault();\n        if (history.includes(text)){\n            setBoolError(true)\n            setHelpertext('Already Guessed')\n            return\n        }\n\n\n        let countryValidation \n        countryValidation = countries.filter(country => {\n            const regex = new RegExp(`^${text}$`, \"i\");\n            return (country.name.match(regex))\n        })\n\n        if (countryValidation==0){\n            setBoolError(true)\n            setHelpertext('Enter a valid country')\n            setText('')\n            return\n        }\n\n        history.push(text)\n\n        for (var i = 0; i < answers.answers.length; i++){\n            if (answers.answers[i].name == text){\n                results.push(true)\n                setText('')\n                return\n            }\n        }\n        \n        // console.log('answers', answers)\n        // console.log('guess: ', text)\n        \n        results.push(false)\n        // console.log('results', results)\n\n        setText('')\n\n    }\n\treturn (\n\t\t<React.Fragment>\n            <Container maxWidth=\"md\" component=\"main\" >\n                <Card >\n                    <CardContent >\n\n                    {suggestions && suggestions.map((suggestion,i) =>\n                        <Typography  \n                            key={i} \n                            variant=\"h6\" \n                            color=\"inherit\" \n                            noWrap\n                            className = {classes.suggestion}\n                            onClick={()=>onSuggestHandler(suggestion.name)}>\n                            {suggestion.name}\n                        </Typography>\n                            )}\n                        <form className={classes.guessForm} onSubmit={handleSubmit} >\n                            <TextField\n                            id=\"outlined-guess\"\n                            label=\"Guess a Country\"\n                            onChange={e=> onChangeHandler(e.target.value)}\n                            value={text}\n                            error={boolError}\n                            helperText={helpertext}\n                            // onBlur={()=> {\n                            //     setTimeout(()=>{\n                            //         setSuggestions([])\n                            //     }, 100)\n                            // }}\n                            />\n                            <Button \n                            className='guessButton'\n                            type=\"submit\"\n                            variant=\"contained\"\n                            disableElevation>\n                                Guess\n                            </Button>\n                            \n                        </form>\n                    </CardContent>\n                </Card>\n            </Container>\n        </React.Fragment>\n\t);\n};\n\nexport default Guess;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}