{"ast":null,"code":"var _jsxFileName = \"/home/fsmith/geoRiddle/react/geoapi/src/components/Guess.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\n\n// const useStyles = makeStyles((theme) => ({\n// \tcardMedia: {\n// \t\tpaddingTop: '56.25%', // 16:9\n// \t},\n// \tlink: {\n// \t\tmargin: theme.spacing(1, 1.5),\n// \t},\n// \tcardHeader: {\n// \t\tbackgroundColor:\n// \t\t\ttheme.palette.type === 'light'\n// \t\t\t\t? theme.palette.grey[200]\n// \t\t\t\t: theme.palette.grey[700],\n// \t},\n// \tcountryName: {\n// \t\tfontSize: '16px',\n// \t\ttextAlign: 'left',\n// \t},\n// \tcountryCapital: {\n// \t\tdisplay: 'flex',\n// \t\tjustifyContent: 'left',\n// \t\talignItems: 'baseline',\n// \t\tfontSize: '12px',\n// \t\ttextAlign: 'left',\n// \t\tmarginBottom: theme.spacing(2),\n// \t},\n// }));\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Guess = props => {\n  _s();\n  const [text, setText] = useState([]);\n  const [suggestions, setSuggestions] = useState([]);\n  const {\n    countries\n  } = props;\n  const onChangeHandler = text => {\n    let matches = [];\n    if (text.length > 0) {\n      matches = countries.filter(country => {\n        const regex = new RegExp(`${text}`, \"gi\");\n        return country.name.match(regex);\n      });\n    }\n    console.log('matches', matches);\n    setSuggestions(matches);\n    setText(text);\n  };\n  if (!countries || countries.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Can not find any countries, sorry\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 51\n  }, this);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      component: \"main\",\n      children: [suggestions && suggestions.map((suggestion, i) => /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        color: \"inherit\",\n        noWrap: true,\n        children: suggestion.name\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"outlined-guess\",\n        label: \"Guess\",\n        onChange: e => onChangeHandler(e.target.value),\n        value: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 3\n  }, this);\n};\n_s(Guess, \"FX12hUK1dokNqLs0k/xNaYrQzvU=\");\n_c = Guess;\nexport default Guess;\nvar _c;\n$RefreshReg$(_c, \"Guess\");","map":{"version":3,"names":["React","useEffect","useState","makeStyles","TextField","Container","Typography","Guess","props","text","setText","suggestions","setSuggestions","countries","onChangeHandler","matches","length","filter","country","regex","RegExp","name","match","console","log","map","suggestion","i","e","target","value"],"sources":["/home/fsmith/geoRiddle/react/geoapi/src/components/Guess.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField'\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\n\n// const useStyles = makeStyles((theme) => ({\n// \tcardMedia: {\n// \t\tpaddingTop: '56.25%', // 16:9\n// \t},\n// \tlink: {\n// \t\tmargin: theme.spacing(1, 1.5),\n// \t},\n// \tcardHeader: {\n// \t\tbackgroundColor:\n// \t\t\ttheme.palette.type === 'light'\n// \t\t\t\t? theme.palette.grey[200]\n// \t\t\t\t: theme.palette.grey[700],\n// \t},\n// \tcountryName: {\n// \t\tfontSize: '16px',\n// \t\ttextAlign: 'left',\n// \t},\n// \tcountryCapital: {\n// \t\tdisplay: 'flex',\n// \t\tjustifyContent: 'left',\n// \t\talignItems: 'baseline',\n// \t\tfontSize: '12px',\n// \t\ttextAlign: 'left',\n// \t\tmarginBottom: theme.spacing(2),\n// \t},\n// }));\n\nconst Guess = (props) => {\n\tconst [text, setText] = useState([]);\n    const [suggestions, setSuggestions] = useState([])\n\tconst { countries } = props;\n\tconst onChangeHandler = (text) => {\n        let matches = []\n        if (text.length > 0) {\n            matches = countries.filter(country => {\n            const regex = new RegExp(`${text}`, \"gi\");\n            return country.name.match(regex)\n        })\n        }\n        console.log('matches', matches)\n\t\tsetSuggestions(matches)\n        setText(text)\n        \n\t}\n\n\n\tif (!countries || countries.length === 0) return <p>Can not find any countries, sorry</p>;\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Container maxWidth=\"md\" component=\"main\">\n                {suggestions && suggestions.map((suggestion,i) =>\n                    <Typography  key={i} variant=\"h6\" color=\"inherit\" noWrap>\n                        {suggestion.name}\n                    </Typography>\n                )}\n            <TextField\n                id=\"outlined-guess\"\n                label=\"Guess\"\n                onChange={e=> onChangeHandler(e.target.value)}\n                value={text}\n            />\n\n            </Container>\n\t\t</React.Fragment>\n\t);\n};\nexport default Guess;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,UAAU,QAAQ,0BAA0B;AACrD,OAAOC,SAAS,MAAM,6BAA6B;AACnD,OAAOC,SAAS,MAAM,6BAA6B;AACnD,OAAOC,UAAU,MAAM,8BAA8B;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA,MAAMC,KAAK,GAAIC,KAAK,IAAK;EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACjC,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACrD,MAAM;IAAEW;EAAU,CAAC,GAAGL,KAAK;EAC3B,MAAMM,eAAe,GAAIL,IAAI,IAAK;IAC3B,IAAIM,OAAO,GAAG,EAAE;IAChB,IAAIN,IAAI,CAACO,MAAM,GAAG,CAAC,EAAE;MACjBD,OAAO,GAAGF,SAAS,CAACI,MAAM,CAACC,OAAO,IAAI;QACtC,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAAE,GAAEX,IAAK,EAAC,EAAE,IAAI,CAAC;QACzC,OAAOS,OAAO,CAACG,IAAI,CAACC,KAAK,CAACH,KAAK,CAAC;MACpC,CAAC,CAAC;IACF;IACAI,OAAO,CAACC,GAAG,CAAC,SAAS,EAAET,OAAO,CAAC;IACrCH,cAAc,CAACG,OAAO,CAAC;IACjBL,OAAO,CAACD,IAAI,CAAC;EAEpB,CAAC;EAGD,IAAI,CAACI,SAAS,IAAIA,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE,oBAAO;IAAA,UAAG;EAAiC;IAAA;IAAA;IAAA;EAAA,QAAI;EACzF,oBACC,QAAC,KAAK,CAAC,QAAQ;IAAA,uBACd,QAAC,SAAS;MAAC,QAAQ,EAAC,IAAI;MAAC,SAAS,EAAC,MAAM;MAAA,WAC3BL,WAAW,IAAIA,WAAW,CAACc,GAAG,CAAC,CAACC,UAAU,EAACC,CAAC,kBACzC,QAAC,UAAU;QAAU,OAAO,EAAC,IAAI;QAAC,KAAK,EAAC,SAAS;QAAC,MAAM;QAAA,UACnDD,UAAU,CAACL;MAAI,GADFM,CAAC;QAAA;QAAA;QAAA;MAAA,QAEN,CAChB,eACL,QAAC,SAAS;QACN,EAAE,EAAC,gBAAgB;QACnB,KAAK,EAAC,OAAO;QACb,QAAQ,EAAEC,CAAC,IAAGd,eAAe,CAACc,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;QAC9C,KAAK,EAAErB;MAAK;QAAA;QAAA;QAAA;MAAA,QACd;IAAA;MAAA;MAAA;MAAA;IAAA;EAEU;IAAA;IAAA;IAAA;EAAA,QACL;AAEnB,CAAC;AAAC,GAtCIF,KAAK;AAAA,KAALA,KAAK;AAuCX,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}