{"ast":null,"code":"var _jsxFileName = \"/home/fsmith/geoRiddle/react/geoapi/src/components/Guess.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  suggestion: {\n    cursor: 'pointer',\n    borderLeft: '1px solid black',\n    borderRight: '1px solid black',\n    borderBottom: '1px solid black',\n    background: 'white',\n    '&:hover': {\n      background: \"gray\"\n    }\n  }\n}));\nconst Guess = props => {\n  _s();\n  const [results, setResults] = useState([]);\n  const [text, setText] = useState([]);\n  const [suggestions, setSuggestions] = useState([]);\n  const [history, setHistory] = useState([]);\n  const {\n    answers\n  } = props;\n  const {\n    countries\n  } = props;\n  const classes = useStyles();\n  const onSuggestHandler = text => {\n    setText(text);\n    setSuggestions([]);\n  };\n  const onChangeHandler = text => {\n    let matches = [];\n    if (text.length > 0) {\n      matches = countries.filter(country => {\n        const regex = new RegExp(`${text}`, \"gi\");\n        return country.name.match(regex);\n      });\n    }\n    console.log('results', results);\n    setSuggestions(matches.slice(0, 5));\n    setText(text);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    history.push(text);\n    for (var i = 0; i < answers.length; i++) {\n      // look for the entry with a matching `code` value\n      if (answers[i].name == text) {\n        console.log('result: ', text);\n        results.push(true);\n        setText('');\n        return;\n      }\n    }\n    console.log('answers', answers);\n    console.log('guess: ', text);\n    console.log('history: ', history);\n    results.push(false);\n    setText('');\n  };\n  if (!answers || answers.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Can not find any answers, sorry\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 47\n  }, this);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      component: \"main\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: \"guess card\",\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          className: \"guess\",\n          children: [suggestions && suggestions.map((suggestion, i) => /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            color: \"inherit\",\n            noWrap: true,\n            className: classes.suggestion,\n            onClick: () => onSuggestHandler(suggestion.name),\n            children: suggestion.name\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this)), /*#__PURE__*/_jsxDEV(\"form\", {\n            className: classes.container,\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              id: \"outlined-guess\",\n              label: \"Guess a Country\",\n              onChange: e => onChangeHandler(e.target.value),\n              value: text,\n              onBlur: () => {\n                setTimeout(() => {\n                  setSuggestions([]);\n                }, 100);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              variant: \"contained\",\n              disableElevation: true,\n              children: \"Guess\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 3\n  }, this);\n};\n_s(Guess, \"o7QmHobpePTw8IoKv9+Ko/yigBc=\", false, function () {\n  return [useStyles];\n});\n_c = Guess;\nexport default Guess;\nvar _c;\n$RefreshReg$(_c, \"Guess\");","map":{"version":3,"names":["React","useEffect","useState","makeStyles","TextField","Container","Typography","Button","Card","CardContent","useStyles","theme","suggestion","cursor","borderLeft","borderRight","borderBottom","background","Guess","props","results","setResults","text","setText","suggestions","setSuggestions","history","setHistory","answers","countries","classes","onSuggestHandler","onChangeHandler","matches","length","filter","country","regex","RegExp","name","match","console","log","slice","handleSubmit","e","preventDefault","push","i","map","container","target","value","setTimeout"],"sources":["/home/fsmith/geoRiddle/react/geoapi/src/components/Guess.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField'\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst useStyles = makeStyles((theme) => ({\n\tsuggestion: {\n        \n\t\tcursor: 'pointer',\n        borderLeft: '1px solid black',\n        borderRight: '1px solid black',\n        borderBottom: '1px solid black',\n        background: 'white',\n        '&:hover': {\n            background: \"gray\",\n        }\n\t},\n\n\n}));\n\nconst Guess = (props) => {\n    const [results, setResults] = useState([])\n\tconst [text, setText] = useState([])\n    const [suggestions, setSuggestions] = useState([])\n    const [history, setHistory] = useState([])\n\tconst { answers } = props;\n    const { countries } = props;\n    const classes = useStyles();\n    const onSuggestHandler = (text)=>{\n        setText(text);\n        setSuggestions([]);\n    }\n\tconst onChangeHandler = (text) => {\n\n        let matches = []\n        if (text.length > 0) {\n            matches = countries.filter(country => {\n            const regex = new RegExp(`${text}`, \"gi\");\n            return country.name.match(regex)\n        })\n        }\n        console.log('results', results)\n\t\tsetSuggestions(matches.slice(0,5))\n        setText(text)\n        \n\t}\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        history.push(text)\n        for (var i = 0; i < answers.length; i++){\n            // look for the entry with a matching `code` value\n            if (answers[i].name == text){\n                console.log('result: ', text)\n                results.push(true)\n                setText('')\n                return\n            }\n        }\n        \n        console.log('answers', answers)\n        console.log('guess: ', text)\n        console.log('history: ', history)\n        results.push(false)\n        setText('')\n\n    }\n\n\tif (!answers || answers.length === 0) return <p>Can not find any answers, sorry</p>;\n\treturn (\n\t\t<React.Fragment>\n\n\t\t\t<Container maxWidth=\"md\" component=\"main\">\n                <Card className=\"guess card\">\n                    <CardContent className=\"guess\">\n\n                    {suggestions && suggestions.map((suggestion,i) =>\n                        <Typography  \n                            key={i} \n                            variant=\"h6\" \n                            color=\"inherit\" \n                            noWrap\n                            className = {classes.suggestion}\n                            onClick={()=>onSuggestHandler(suggestion.name)}>\n                            {suggestion.name}\n                        </Typography>\n                            )}\n                        <form className={classes.container} onSubmit={handleSubmit} >\n                            <TextField\n                            id=\"outlined-guess\"\n                            label=\"Guess a Country\"\n                            onChange={e=> onChangeHandler(e.target.value)}\n                            value={text}\n                            onBlur={()=> {\n                                setTimeout(()=>{\n                                    setSuggestions([])\n                                }, 100)\n                            }}\n                            />\n                            <Button \n                            type=\"submit\"\n                            variant=\"contained\"\n                            disableElevation>\n                                Guess\n                            </Button>\n                        </form>\n                    </CardContent>\n                </Card>\n\n\n\n            </Container>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default Guess;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}