{"ast":null,"code":"var _jsxFileName = \"/home/fsmith/geoRiddle/react/geoapi/src/components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Riddle from './Riddle';\nimport Results from './Results';\nimport Strikes from './Strikes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  suggestion: {\n    cursor: 'pointer',\n    borderLeft: '1px solid black',\n    borderRight: '1px solid black',\n    borderBottom: '1px solid black',\n    borderTop: '1px solid black',\n    background: 'white',\n    '&:hover': {\n      background: \"gray\"\n    }\n  },\n  listResults: {\n    padding: '0px'\n  }\n}));\nconst Guess = props => {\n  _s();\n  const {\n    answers\n  } = props;\n  const {\n    countries\n  } = props;\n  const [results] = useState([]);\n  const [strikes] = useState([]);\n  const [text, setText] = useState([]);\n  const [suggestions, setSuggestions] = useState([]);\n  const [history] = useState([]);\n  const [finished, setFinished] = useState([]);\n  const [boolError, setBoolError] = useState(false);\n  const [helpertext, setHelpertext] = useState([]);\n  const classes = useStyles();\n  const onSuggestHandler = text => {\n    setText(text);\n    setSuggestions([]);\n  };\n  const onChangeHandler = text => {\n    let matches = [];\n    if (text.length > 0) {\n      matches = countries.filter(country => {\n        const regex = new RegExp(`${text}`, \"gi\");\n        return country.name.match(regex);\n      });\n    }\n    setSuggestions(matches.slice(0, 5));\n    setText(text);\n  };\n  const handleSubmit = e => {\n    let submittedText = text.trim();\n    e.preventDefault();\n    if (history.includes(submittedText)) {\n      setBoolError(true);\n      setHelpertext('Already Guessed');\n      return;\n    }\n    let countryValidation;\n    countryValidation = countries.filter(country => {\n      const regex = new RegExp(`^${submittedText}$`, \"i\");\n      return country.name.match(regex);\n    });\n    console.log(countryValidation.length);\n    if (countryValidation.length === 0) {\n      setBoolError(true);\n      setHelpertext('Enter a valid country');\n      setText('');\n      return;\n    }\n    history.push(submittedText);\n    for (var i = 0; i < answers.answers.length; i++) {\n      if (answers.answers[i].name === submittedText) {\n        results.push(true);\n        setText('');\n        return;\n      } else {\n        strikes.push(submittedText);\n        setText('');\n        return;\n      }\n    }\n    results.push(false);\n    setText('');\n  };\n  if (!answers || answers.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Can not find any answers, sorry\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 47\n  }, this);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Riddle, {\n      answers: answers,\n      countries: countries\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Results, {\n      results: results,\n      history: history,\n      answers: answers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Strikes, {\n      strikes: strikes,\n      results: results,\n      history: history,\n      answers: answers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      component: \"main\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: classes.listResults,\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          className: classes.listResults,\n          children: [suggestions && suggestions.map((suggestion, i) => /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            color: \"inherit\",\n            noWrap: true,\n            className: classes.suggestion,\n            onClick: () => onSuggestHandler(suggestion.name),\n            children: suggestion.name\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 25\n          }, this)), /*#__PURE__*/_jsxDEV(\"form\", {\n            className: classes.guessForm,\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              id: \"outlined-guess\",\n              label: \"Guess a Country\",\n              onChange: e => onChangeHandler(e.target.value),\n              value: text,\n              error: boolError,\n              helperText: helpertext\n              // onBlur={()=> {\n              //     setTimeout(()=>{\n              //         setSuggestions([])\n              //     }, 100)\n              // }}\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              className: \"guessButton\",\n              type: \"submit\",\n              variant: \"contained\",\n              disableElevation: true,\n              children: \"Guess\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 3\n  }, this);\n};\n_s(Guess, \"VksVF+4ek/hUASQio6x5fBwW/q0=\", false, function () {\n  return [useStyles];\n});\n_c = Guess;\nexport default Guess;\nvar _c;\n$RefreshReg$(_c, \"Guess\");","map":{"version":3,"names":["React","useState","makeStyles","TextField","Container","Typography","Button","Card","CardContent","Riddle","Results","Strikes","useStyles","theme","suggestion","cursor","borderLeft","borderRight","borderBottom","borderTop","background","listResults","padding","Guess","props","answers","countries","results","strikes","text","setText","suggestions","setSuggestions","history","finished","setFinished","boolError","setBoolError","helpertext","setHelpertext","classes","onSuggestHandler","onChangeHandler","matches","length","filter","country","regex","RegExp","name","match","slice","handleSubmit","e","submittedText","trim","preventDefault","includes","countryValidation","console","log","push","i","map","guessForm","target","value"],"sources":["/home/fsmith/geoRiddle/react/geoapi/src/components/Game.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField'\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Riddle from './Riddle';\nimport Results from './Results';\nimport Strikes from './Strikes';\n\nconst useStyles = makeStyles((theme) => ({\n\tsuggestion: {\n\n\t\tcursor: 'pointer',\n        borderLeft: '1px solid black',\n        borderRight: '1px solid black',\n        borderBottom: '1px solid black',\n        borderTop: '1px solid black',\n        background: 'white',\n        '&:hover': {\n            background: \"gray\",\n        }\n\t},\n\n    listResults: {\n        padding: '0px',\n    }\n\n\n}));\n\nconst Guess = (props) => {\n    const { answers } = props;\n    const { countries } = props;\n    const [results] = useState([])\n    const [strikes] = useState([])\n\tconst [text, setText] = useState([])\n    const [suggestions, setSuggestions] = useState([])\n    const [history] = useState([])\n    const [finished, setFinished] = useState([])\n    const [boolError, setBoolError] = useState(false)\n    const [helpertext, setHelpertext] = useState([])\n\n\n    \n    const classes = useStyles();\n    \n\n    const onSuggestHandler = (text)=>{\n\n        setText(text);\n        setSuggestions([]);\n    }\n\tconst onChangeHandler = (text) => {\n        let matches = []\n        if (text.length > 0) {\n            matches = countries.filter(country => {\n            const regex = new RegExp(`${text}`, \"gi\");\n            return country.name.match(regex)\n        })\n        }\n\n\t\tsetSuggestions(matches.slice(0,5))\n        setText(text)\n        \n\t}\n\n    const handleSubmit = (e) => {\n        let submittedText = text.trim()\n        e.preventDefault();\n        if (history.includes(submittedText)){\n            setBoolError(true)\n            setHelpertext('Already Guessed')\n            return\n        }\n\n\n        let countryValidation \n        countryValidation = countries.filter(country => {\n\n            const regex = new RegExp(`^${submittedText}$`, \"i\");\n            \n            return (country.name.match(regex))\n        })\n        console.log(countryValidation.length)\n        if (countryValidation.length===0){\n            setBoolError(true)\n            setHelpertext('Enter a valid country')\n            setText('')\n            return\n        }\n\n        history.push(submittedText)\n\n        for (var i = 0; i < answers.answers.length; i++){\n            if (answers.answers[i].name === submittedText){\n                results.push(true)\n                setText('')\n                return\n            }\n            else{\n                strikes.push(submittedText)\n                setText('')\n                return\n            }\n        }\n        \n\n        \n        results.push(false)\n\n\n        setText('')\n\n    }\n\n\tif (!answers || answers.length === 0) return <p>Can not find any answers, sorry</p>;\n\treturn (\n\t\t<React.Fragment>\n            <Riddle answers={answers} countries={countries}/>\n            <Results results = {results} history = {history} answers = {answers}/>\n            <Strikes strikes = {strikes}  results = {results} history = {history} answers = {answers}/>\n            <Container maxWidth=\"md\" component=\"main\" >\n                <Card className={classes.listResults}>\n                    <CardContent className={classes.listResults}>\n\n                    {suggestions && suggestions.map((suggestion,i) =>\n                        <Typography  \n                            key={i} \n                            variant=\"h6\" \n                            color=\"inherit\" \n                            noWrap\n                            className = {classes.suggestion}\n                            onClick={()=>onSuggestHandler(suggestion.name)}>\n                            {suggestion.name}\n                        </Typography>\n                            )}\n                        <form className={classes.guessForm} onSubmit={handleSubmit} >\n                            <TextField\n                            id=\"outlined-guess\"\n                            label=\"Guess a Country\"\n                            onChange={e=> onChangeHandler(e.target.value)}\n                            value={text}\n                            error={boolError}\n                            helperText={helpertext}\n                            // onBlur={()=> {\n                            //     setTimeout(()=>{\n                            //         setSuggestions([])\n                            //     }, 100)\n                            // }}\n                            />\n                            <Button \n                            className='guessButton'\n                            type=\"submit\"\n                            variant=\"contained\"\n                            disableElevation>\n                                Guess\n                            </Button>\n                            \n                        </form>\n                    </CardContent>\n                </Card>\n\n\n\n            </Container>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default Guess;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}