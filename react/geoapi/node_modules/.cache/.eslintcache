[{"/home/fsmith/GeoRiddleGame/georiddle/react/geoapi/src/index.js":"1","/home/fsmith/GeoRiddleGame/georiddle/react/geoapi/src/App.js":"2","/home/fsmith/GeoRiddleGame/georiddle/react/geoapi/src/components/Header.js":"3","/home/fsmith/GeoRiddleGame/georiddle/react/geoapi/src/components/Footer.js":"4","/home/fsmith/GeoRiddleGame/georiddle/react/geoapi/src/components/CountriesLoading.js":"5","/home/fsmith/GeoRiddleGame/georiddle/react/geoapi/src/components/Game.js":"6","/home/fsmith/GeoRiddleGame/georiddle/react/geoapi/src/components/Riddle.js":"7","/home/fsmith/GeoRiddleGame/georiddle/react/geoapi/src/components/Strikes.js":"8","/home/fsmith/GeoRiddleGame/georiddle/react/geoapi/src/components/Results.js":"9"},{"size":607,"mtime":1675875148758,"results":"10","hashOfConfig":"11"},{"size":1908,"mtime":1676392250785,"results":"12","hashOfConfig":"11"},{"size":914,"mtime":1675875148758,"results":"13","hashOfConfig":"11"},{"size":1751,"mtime":1675875148758,"results":"14","hashOfConfig":"11"},{"size":312,"mtime":1675875148758,"results":"15","hashOfConfig":"11"},{"size":8914,"mtime":1676388691912,"results":"16","hashOfConfig":"11"},{"size":1250,"mtime":1676388691912,"results":"17","hashOfConfig":"11"},{"size":988,"mtime":1676388691912,"results":"18","hashOfConfig":"11"},{"size":1450,"mtime":1676388691912,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"182fgrg",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},"/home/fsmith/GeoRiddleGame/georiddle/react/geoapi/src/index.js",[],[],"/home/fsmith/GeoRiddleGame/georiddle/react/geoapi/src/App.js",["53"],[],"import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nimport CountriesLoadingComponent from './components/CountriesLoading';\nimport axios from 'axios'\n\nimport Game from './components/Game';\n\nfunction App() {\n\t// const AnswersLoading = AnswersLoadingComponent(Riddle);\n\tconst CountriesLoading = CountriesLoadingComponent(Game)\n\t// const RiddleLoading = RiddleLoadingComponent(Riddle)\n\n\tconst startDate = new Date('February 14, 2023 00:00:00');\n\tconst currentDate = new Date();\n\n\tconst riddleID = Math.ceil((currentDate-startDate)/86400000) // find the riddle id by subtracting the number of days, dividing by milliseconds and rounding up\n\tconst [appState, setAppState] = useState({\n\t\tloadingAnswers: true,\n\t\tloadingCountries: true,\n\t\tcountries: null,\n\t\tanswers: null\n\t});\n\n\tuseEffect(() => {\n\t\tsetAppState({ loadingAnswers: true,  loadingCountries: true });\n\n\t\t//this is where you should load the answers or probably just get rid of it and use a custom hook\n\n\t\t// const loadAnswers = async () => {\n\t\t// \tconst answerData = await axios.get('http://127.0.0.1:8000/api/riddles/1')\n\t\t// \tsetAppState({ loadingAnswers: false,  answers: answerData.data});\n\t\t// }\n\t\t// loadAnswers();\n\n\t\tconst loadCountries = async () => {\n\t\t\tconst countryData = await axios.get('/api/countries/')\n\t\t\tconst answerData = await axios.get('/api/riddles/' + riddleID)\n\t\t\tsetAppState({ loadingCountries: false, answers: answerData.data, countries: countryData.data});\n\t\t}\n\t\tloadCountries();\n\n\t},[setAppState]);\n\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{/* <RiddleLoading isLoading={appState.loadingAnswers} answers={appState.answers}/> */}\n\t\t\t{/* <AnswersLoading isLoading={appState.loadingCountries} answers={appState.answers} countries={appState.countries}/> */}\n\t\t\t<CountriesLoading isLoading={appState.loadingCountries} answers={appState.answers} countries={appState.countries}/>\n\t\t</div>\n\t\t\n\t);\n}\nexport default App;","/home/fsmith/GeoRiddleGame/georiddle/react/geoapi/src/components/Header.js",[],[],"/home/fsmith/GeoRiddleGame/georiddle/react/geoapi/src/components/Footer.js",["54"],[],"import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Link from '@material-ui/core/Link';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        borderBottom: `1px solid ${theme.palette.divider}`,\n    },\n}));\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"inherit\" align=\"center\">\n        {'Copyright Â© '}\n        <Link color=\"inherit\" href=\"https://nufactur.com/\">\n            GeoRiddle placeholder site\n        </Link>{' '}\n        2023\n        {' '}\n    </Typography>\n    )\n}\nconst footers = [\n\t{\n\t\ttitle: 'Info',\n\t\tdescription: ['Team', 'Contact us'],\n\t},\n\t{\n\t\ttitle: 'Legal',\n\t\tdescription: ['Privacy policy', 'Terms of use'],\n\t},\n];\n\nfunction Footer() {\n\tconst classes = useStyles();\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Container maxWidth=\"md\" component=\"footer\" className={classes.footer}>\n\t\t\t\t<Grid container spacing={4} justifyContent=\"space-evenly\">\n\t\t\t\t\t{footers.map((footer) => (\n\t\t\t\t\t\t<Grid item xs={6} sm={3} key={footer.title}>\n\t\t\t\t\t\t\t<Typography variant=\"h6\" color=\"textPrimary\" gutterBottom>\n\t\t\t\t\t\t\t\t{footer.title}\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t{footer.description.map((item) => (\n\t\t\t\t\t\t\t\t\t<li key={item}>\n\t\t\t\t\t\t\t\t\t\t<Link href=\"#\" variant=\"subtitle1\" color=\"textSecondary\">\n\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t))}\n\t\t\t\t</Grid>\n\t\t\t\t<Box mt={5}>\n\t\t\t\t\t<Copyright />\n\t\t\t\t</Box>\n\t\t\t</Container>\n\t\t</React.Fragment>\n\t);\n}\n\nexport default Footer;","/home/fsmith/GeoRiddleGame/georiddle/react/geoapi/src/components/CountriesLoading.js",[],[],"/home/fsmith/GeoRiddleGame/georiddle/react/geoapi/src/components/Game.js",["55","56"],[],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField'\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Riddle from './Riddle';\nimport Results from './Results';\nimport Strikes from './Strikes';\n\nconst useStyles = makeStyles((theme) => ({\n\n    riddleFirst: {\n        borderBottom: `1px solid black`,\n    },\n    riddleSecond: {\n        borderBottom: `1px solid black`,\n    },\n    riddleHeader:{\n\n        fontSize: '32px',\n        textAlign: 'center',\n    },\n    riddleNumberOfCountries:{\n        fontSize: '28px',\n        textAlign: 'center',   \n    },\n\n\tsuggestion: {\n\n\t\tcursor: 'pointer',\n        borderLeft: '1px solid black',\n        borderRight: '1px solid black',\n        borderBottom: '1px solid black',\n        borderTop: '1px solid black',\n        background: 'white',\n        '&:hover': {\n            background: \"gray\",\n        }\n\t},\n\n    listResults: {\n        padding: '0px',\n    }, \n\n    incorrect: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'baseline',\n        fontSize: '24px',\n        textAlign: 'center',\n        marginBottom:  '0px',\n        color: 'red',\n        borderColor: 'red',\n        borderLeft: '1px solid ',\n        borderRight: '1px solid ',\n        borderBottom: '1px solid ',\n        borderTop: '1px solid ',\n    }, \n\n    correct: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'baseline',\n        fontSize: '24px',\n        textAlign: 'center',\n        marginBottom:  '0px',\n        color: 'green',\n        borderColor: 'green',\n        borderLeft: '1px solid ',\n        borderRight: '1px solid ',\n        borderBottom: '1px solid ',\n        borderTop: '1px solid ',\n    },\n\n    blank: {\n        \n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'baseline',\n        fontSize: '24px',\n        textAlign: 'center',\n        marginBottom: '0px',\n        color: 'black',\n        borderColor: 'black',\n        borderLeft: '1px solid ',\n        borderRight: '1px solid ',\n        borderBottom: '1px solid ',\n        borderTop: '1px solid ',\n    }, \n\n    winner: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'baseline',\n        fontSize: '32px',\n        textAlign: 'center',\n        marginBottom:  '0px',\n        color: 'green',\n        borderColor: 'green',\n        borderLeft: '1px solid ',\n        borderRight: '1px solid ',\n        borderBottom: '1px solid ',\n        borderTop: '1px solid ',\n    },\n\n    loser: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'baseline',\n        fontSize: '32px',\n        textAlign: 'center',\n        marginBottom:  '0px',\n        color: 'red',\n        borderColor: 'red',\n        borderLeft: '1px solid ',\n        borderRight: '1px solid ',\n        borderBottom: '1px solid ',\n        borderTop: '1px solid ',\n    },\n\n    hidden :\n    {\n        display: 'none'\n    }\n\n\n}));\n\nfunction toTitleCase(str) {\n    return str.toLowerCase().split(' ').map(function (word) {\n      return (word.charAt(0).toUpperCase() + word.slice(1));\n    }).join(' ');\n  }\n\nconst Game = (props) => {\n\n    const { answers, countries } = props;\n    const [strikes] = useState([])\n\tconst [text, setText] = useState([])\n    const [showGuess, setShowGuess] = useState([])\n    const [suggestions, setSuggestions] = useState([])\n    const [history, setHistory] = useState([])\n    const [guessHidden, setGuessHidden] = useState([])\n    const [finished, setFinished] = useState([])\n    const [boolError, setBoolError] = useState(false)\n    const [helpertext, setHelpertext] = useState([])\n    const [headerText, setHeaderText] = useState('Remaining: ' + (answers.answers.length+strikes.length-history.length) + ' Countries  || ' + (3 -strikes.length) + ' Strikes')\n    \n    const classes = useStyles();\n    const [riddleHeaderClass, setRiddleHeaderClass] = useState(classes.riddleNumberOfCountries)\n    \n\n    const onSuggestHandler = (text)=>{\n\n        setText(text);\n        setSuggestions([]);\n    }\n\tconst onChangeHandler = (text) => {\n        setBoolError(false)\n        setHelpertext('')\n        let matches = []\n        if (text.length > 0) {\n            matches = countries.filter(country => {\n            const regex = new RegExp(`${text}`, \"gi\");\n            return country.name.match(regex)\n        })\n        }\n\n\t\tsetSuggestions(matches.slice(0,5))\n        setText(text)\n        \n\t}\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        let submittedText = toTitleCase(text.trim())\n\n        if (history.includes(submittedText)){\n            setBoolError(true)\n            setHelpertext('Already Guessed')\n            return\n        }\n\n        let countryValidation \n        countryValidation = countries.filter(country => {\n\n            const regex = new RegExp(`^${submittedText}$`, \"i\");\n            return (country.name.match(regex))\n        })\n\n        if (countryValidation.length===0){\n            setBoolError(true)\n            setHelpertext('Enter a valid country')\n            setText('')\n\n            return\n        }\n        history.push(submittedText)\n\n\n        let isStrike = true\n        for (var i = 0; i < answers.answers.length; i++){\n            if (answers.answers[i].name === submittedText){\n                isStrike = false\n            }\n\n        }\n\n        if (isStrike === true){\n            strikes.push(submittedText)\n    \n            if  (strikes.length===3) {\n                setFinished('Lost')\n                setHeaderText('You Loser!')\n                setRiddleHeaderClass(classes.loser)\n                setHistory([])\n                setShowGuess(false)\n            }\n            setText('')\n            return\n        }\n    \n        if ((answers.answers.length+strikes.length-history.length)===0 ){\n            setFinished('Won')\n            setHeaderText('Winner')\n            setRiddleHeaderClass(classes.winner)\n            setHistory([])\n            setShowGuess(false)\n            \n    \n        }\n    \n        setText('')\n        return\n    }\n\n\tif (!answers || answers.length === 0) return <p>Can not find any answers, sorry</p>;\n\n\n        // let finish = 'won'\n        // setHistory([]);}\n\n\n\n\treturn (\n\t\t<React.Fragment>\n            {/* <Riddle answers={answers} countries={countries} strikes = {strikes} history = {history} finish = {finished}/> */}\n            <Riddle answers={answers} countries={countries} strikes = {strikes} history = {history} finished = {finished} headerText = {headerText} classes = {classes} riddleHeaderClass = {riddleHeaderClass}/>\n            <Results history = {history} answers = {answers}  finished = {finished} classes = {classes} />\n            <Strikes strikes = {strikes} classes = {classes} />\n            {showGuess && <Container maxWidth=\"md\" component=\"main\" >\n                <Card className={classes.listResults}>\n                    <CardContent className={classes.listResults}>\n\n                    {suggestions && suggestions.map((suggestion,i) =>\n                        <Typography  \n                            key={i} \n                            variant=\"h6\" \n                            color=\"inherit\" \n                            noWrap\n                            className = {classes.suggestion}\n                            onClick={()=>onSuggestHandler(suggestion.name)}>\n                            {suggestion.name}\n                        </Typography>\n                            )}\n                        <form className={classes.guessForm} onSubmit={handleSubmit} >\n                            <TextField\n                            id=\"outlined-guess\"\n                            label=\"Guess a Country\"\n                            onChange={e=> onChangeHandler(e.target.value)}\n                            value={text}\n                            error={boolError}\n                            helperText={helpertext}\n                            // onBlur={()=> {\n                            //     setTimeout(()=>{\n                            //         setSuggestions([])\n                            //     }, 100)\n                            // }}\n                            />\n                            <Button \n                            className='guessButton'\n                            type=\"submit\"\n                            variant=\"contained\"\n                            disableElevation>\n                                Guess\n                            </Button>\n                            \n                        </form>\n                    </CardContent>\n                </Card>\n            </Container>}\n\t\t</React.Fragment>\n\t);\n};\n\nexport default Game;","/home/fsmith/GeoRiddleGame/georiddle/react/geoapi/src/components/Riddle.js",["57","58"],[],"import React, { useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { Container } from '@material-ui/core';\nimport {Card} from '@material-ui/core';\nimport {CardContent} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\n\nconst Riddle = (props) => {\n    \n    const {answers, headerText, classes, riddleHeaderClass} = props;\n    console.log(answers)\n\n    return (\n    <React.Fragment>\n        <Container maxWidth=\"md\"  >\n            <Card className=\"resultCard\">\n                <CardContent className=\"result\">\n                    <div className={classes.riddleFirst}>\n                        <Typography \n                        className={classes.riddleHeader}>\n                            GeoRiddle #{answers.id}: {answers.question}\n                        </Typography>\n                    </div>\n                    <div className={classes.riddleSecond}>\n                        <Typography \n                        className={riddleHeaderClass}>\n                            {headerText}\n                        </Typography>\n                    </div>\n                </CardContent>\n            </Card>\n        </Container>\n    </React.Fragment>\n    );\n}\n\nexport default Riddle\n","/home/fsmith/GeoRiddleGame/georiddle/react/geoapi/src/components/Strikes.js",["59"],[],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst useStyles = makeStyles((theme) => ({\n\n\n\n}));\n\nconst Results = (props) => {\n\n\tconst {  strikes, classes } = props;\n\n\n\n    return (\n\t\t<React.Fragment>                    \n            <Container maxWidth=\"md\"  >  \n                \n            {strikes.map((ans, index) => {   \n                return ( \n                    <Card  className= {classes.listResults}>\n                        <CardContent className= {classes.listResults}>\n                            <li className={classes.incorrect} key={index}>Strike {index+1} : {strikes[index]}</li>\n                        </CardContent>\n                    </Card>\n                    )\n                    })}\n            </Container>  \n        </React.Fragment>\n    );\n};\n\nexport default Results","/home/fsmith/GeoRiddleGame/georiddle/react/geoapi/src/components/Results.js",["60","61","62"],[],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\n\nconst Results = (props) => {\n\n\n\tconst { history, answers, finished, classes } = props;\n\n    if (finished == 'Won' || finished == 'Lost'){\n        for (var i = 0; i < answers.answers.length; i++){\n            history.push(answers.answers[i].name)\n        }\n    }\n    return (\n\t\t<React.Fragment>                    \n            <Container maxWidth=\"md\"  >  \n                \n            {answers.answers.map((ans, index) => {   \n                return history.includes(ans.name) ? ( \n                    <Card  className= {classes.listResults} >\n                        <CardContent className= {classes.listResults}>\n                            <li className={classes.correct} >{ans.name}</li> \n                        </CardContent>\n                    </Card>\n                ) :(\n                    <Card  className= {classes.listResults}>\n                        <CardContent className= {classes.listResults}>\n                            <li className={classes.blank} key={index}>Country Number: {index+1}</li>\n                        </CardContent>\n                    </Card>\n                    )\n                    })}\n            </Container>  \n        </React.Fragment>\n    );\n};\n\nexport default Results",{"ruleId":"63","severity":1,"message":"64","line":43,"column":4,"nodeType":"65","endLine":43,"endColumn":17,"suggestions":"66"},{"ruleId":"67","severity":1,"message":"68","line":3,"column":8,"nodeType":"69","messageId":"70","endLine":3,"endColumn":19},{"ruleId":"67","severity":1,"message":"71","line":147,"column":12,"nodeType":"69","messageId":"70","endLine":147,"endColumn":23},{"ruleId":"67","severity":1,"message":"72","line":147,"column":25,"nodeType":"69","messageId":"70","endLine":147,"endColumn":39},{"ruleId":"67","severity":1,"message":"73","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":25},{"ruleId":"67","severity":1,"message":"74","line":6,"column":10,"nodeType":"69","messageId":"70","endLine":6,"endColumn":20},{"ruleId":"67","severity":1,"message":"75","line":7,"column":7,"nodeType":"69","messageId":"70","endLine":7,"endColumn":16},{"ruleId":"67","severity":1,"message":"74","line":2,"column":10,"nodeType":"69","messageId":"70","endLine":2,"endColumn":20},{"ruleId":"76","severity":1,"message":"77","line":13,"column":18,"nodeType":"78","messageId":"79","endLine":13,"endColumn":20},{"ruleId":"76","severity":1,"message":"77","line":13,"column":39,"nodeType":"78","messageId":"79","endLine":13,"endColumn":41},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'riddleID'. Either include it or remove the dependency array.","ArrayExpression",["80"],"no-unused-vars","'CssBaseline' is defined but never used.","Identifier","unusedVar","'guessHidden' is assigned a value but never used.","'setGuessHidden' is assigned a value but never used.","'useState' is defined but never used.","'makeStyles' is defined but never used.","'useStyles' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"81","fix":"82"},"Update the dependencies array to be: [riddleID, setAppState]",{"range":"83","text":"84"},[1484,1497],"[riddleID, setAppState]"]